{
  "active": true,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entree": {
      "main": [
        [
          {
            "node": "defaultEmbedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "kindev": {
      "main": [
        [
          {
            "node": "nouveau message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "defaultEmbedding": {
      "main": [
        [
          {
            "node": "Get Last todo/doing/waiting missions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Last todo/doing/waiting missions": {
      "main": [
        [
          {
            "node": "Get Last done missions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Last done missions": {
      "main": [
        [
          {
            "node": "missions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "missions": {
      "main": [
        [
          {
            "node": "kindev",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-30T15:55:00.119Z",
  "id": "7gSW7ZaAHc61PVPS",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "QP - Questionneur de Production",
  "nodes": [
    {
      "parameters": {},
      "id": "ff74a607-da30-49e8-91dd-2638f725e0b0",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -1180,
        600
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "if ($node[\"entree\"].json.chatInput != null) {\n  return {\"output\": $json.output};\n}\n\nreturn {\"json\":{\"response\": $json.output}};"
      },
      "id": "655a65fd-b92c-4895-a351-893206641906",
      "name": "nouveau message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        800
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $json;\n\nif (json.chatInput) {\n json.query = json.chatInput;\n}\n\nif (!json.query) {\n  json.query = \"Je souhaite un point général sur la situation de la production.\";\n}\n\n// Execution Status\nif (json.query.match(/kin\\w+/i)) {\n  json.kin = json.query.match(/kin\\w+/i)[0];\n} else {\n  json.kin = null;\n}\n\nreturn {\"json\": json};"
      },
      "id": "a0abd500-d427-46a7-a412-4e06908ea337",
      "name": "entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        600
      ]
    },
    {
      "parameters": {
        "assistantId": "asst_KEwBhc34Qsh3dcu2Gu8bgFne",
        "text": "=# Mission Globale\n\nAnalyser l'état de la production de l'équipe des Kins.\n\n# Demande Spécifique (Query)\n\n{{ $node[\"entree\"].json.query }}\n\n# Tâches actuellement dans dans la pipeline\n\n{{  JSON.stringify($node[\"missions\"].json.missionsInPipeline).substring(0, 10000) }}{{  JSON.stringify($node[\"missions\"].json.missionsInPipeline).length > 10000 ? \"[...]\" : \"\" }}\n\n# Dernières Tâches dans DONE\n\n{{  JSON.stringify($node[\"missions\"].json.missionsDone).substring(0, 10000) }}{{  JSON.stringify($node[\"missions\"].json.missionsDone).length > 10000 ? \"[...]\" : \"\" }}\n\n# Processus\n\n- Utilise des listes.\n- Inclus si possible client, kinDemandeur, kin, mailId, mailSubject, et un résumé de la mission \n\n# Instruction - Réponse au besoin informationnel\n\nA partir des informations disponibles, formule la meilleure réponse possible au besoin informationnel. ",
        "options": {}
      },
      "id": "fd9b74a7-b014-4004-b146-49f03cdc3138",
      "name": "kindev",
      "type": "@n8n/n8n-nodes-langchain.openAiAssistant",
      "typeVersion": 1,
      "position": [
        -260,
        800
      ],
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "WY3bm7GCb9qfewyS",
          "name": "OpenAi account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "workflowId": "=IJeSapyzv0Y9koZ9",
        "options": {}
      },
      "id": "e083f654-0c5e-45ef-b524-1567a367dd32",
      "name": "defaultEmbedding",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -740,
        600
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}query",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"namespace\": \"missions\",\n  \"filter\" : {\"status\": { \"$in\": [\"todo\", \"doing\", \"waiting\"] }},\n  \"vector\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }},\n  \"includeMetadata\": true,\n  \"topK\": 25\n}",
        "options": {}
      },
      "id": "88ae03aa-9193-4291-8bf7-58fc2edd8efd",
      "name": "Get Last todo/doing/waiting missions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -520,
        600
      ],
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}query",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"namespace\": \"missions\",\n  \"includeMetadata\": true,\n  \"topK\": 10,\n  \"filter\" : {\"status\": \"done\"},\n  \"vector\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }}\n}",
        "options": {}
      },
      "id": "68284cfb-17a4-4a4f-92ef-94bad8050043",
      "name": "Get Last done missions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -280,
        600
      ],
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function truncateStringsInJson(obj) {\n    // Vérifier si l'objet est null ou undefined\n    if (obj === null || obj === undefined) {\n        return obj;\n    }\n\n    // Parcourir les propriétés de l'objet\n    for (let key in obj) {\n        if (typeof obj[key] === 'string') {\n            // Tronquer les strings à 500 caractères et ajouter \"[...]\" si nécessaire\n            if (obj[key].length > 500) {\n                obj[key] = obj[key].substring(0, 500) + \"[...]\";\n            }\n        } else if (typeof obj[key] === 'object') {\n            // Appliquer la fonction de manière récursive pour les objets et tableaux\n            truncateStringsInJson(obj[key]);\n        }\n    }\n\n    return obj;\n}\n\nlet missionsInPipeline = $node[\"Get Last todo/doing/waiting missions\"].json.matches;\nlet missionsDone = $node[\"Get Last done missions\"].json.matches;\n\nmissionsInPipeline = truncateStringsInJson(missionsInPipeline);\nmissionsDone = truncateStringsInJson(missionsDone);\n\nreturn {\"json\": {\"missionsInPipeline\": missionsInPipeline, \"missionsDone\": missionsDone}};"
      },
      "id": "1473c9ed-0d28-476c-b7b0-d5adb943a375",
      "name": "missions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -520,
        800
      ]
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Bonjour ! Je suis KinDev. Que souhaitez-vous savoir sur la Production actuelle ?",
        "options": {
          "inputPlaceholder": "Je souhaite un point général sur la situation de la production.",
          "responseMode": "lastNode",
          "subtitle": "Le questionneur_de_production retourne une réponse issue de la base de données des tâches des Kins  Pour bien l'utiliser, il faut rédiger un paragraphe de demande détaillée, contenant : - (optionnel) Le statut des tâches désirées (TODO/DOING/DONE) - (filtre optionnel) Le Kin désiré - Les informations que tu cherches, avec les  éléments de contexte. - L'intention d'usage : où tu en es dans les instructions et ce que tu souhaites faire. - Le format de réponse désiré.",
          "title": "Questionneur de  Production"
        }
      },
      "id": "6f42c407-6b06-417e-8727-9e5379028c03",
      "name": "Chat Trigger",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1,
      "position": [
        -1180,
        420
      ],
      "webhookId": "897ced6f-149f-4da4-8a69-30216d828b78"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "any"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2023-12-17T10:07:55.424Z",
      "updatedAt": "2023-12-20T20:25:13.009Z",
      "id": "DzuSxffpFOEBRhld",
      "name": "outil"
    },
    {
      "createdAt": "2024-01-21T09:46:57.068Z",
      "updatedAt": "2024-01-21T09:46:57.068Z",
      "id": "O7AwhYu4Pf4sOOHS",
      "name": "beta"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-01-31T10:46:10.000Z",
  "versionId": "7db33a2c-0c2c-474a-b48b-8063403918cd"
}