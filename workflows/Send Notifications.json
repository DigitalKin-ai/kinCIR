{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escape Markdown Ouput": {
      "main": [
        [
          {
            "node": "Send Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chunks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Escape Markdown": {
      "main": [
        [
          {
            "node": "Send Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If output": {
      "main": [
        [
          {
            "node": "Escape Markdown Ouput",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If insructions": {
      "main": [
        [
          {
            "node": "Escape Markdown",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Send Log": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "entree": {
      "main": [
        [
          {
            "node": "/crud_mission/read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CRUD Mission : Read": {
      "main": [
        [
          {
            "node": "mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "/crud_mission/read": {
      "main": [
        [
          {
            "node": "CRUD Mission : Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mission": {
      "main": [
        [
          {
            "node": "kins",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response formating": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Store responses",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store responses": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Response formating",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "kins": {
      "main": [
        [
          {
            "node": "telegramChatId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "telegramChatId": {
      "main": [
        [
          {
            "node": "If output",
            "type": "main",
            "index": 0
          },
          {
            "node": "If insructions",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "chunks",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-27T13:03:44.164Z",
  "id": "EYWde6gUS9Qq2ok7",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Send Notifications",
  "nodes": [
    {
      "parameters": {},
      "id": "fa64a015-6ba6-4159-8ff3-e52c0a382b33",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -1380,
        460
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function escapeMarkdownV2(text) {\n    return text.replace(/[_*\\[\\]()~`>#\\+=\\-{}\\.!|]/g, match => '\\\\' + match)\n               .replace(/(\\n```)([a-z]*\\n[\\s\\S]+?\\n```)/g, (match, p1, p2) => p1.replace('\\n', '') + p2);\n}\n\nlet json = $node[\"mission\"].json;\n\nlet text = json.output;\nif (text.length > 3900) {\n  text = \"[...]\" + text.substring(text.length - 3900); \n}\ntext = json.kin + \" (Output Producteur) (Execution #\" + $node[\"entree\"].json.executionId + \") - \" + json.threadSubject + \": \\n\\n\" + text;\ntext = escapeMarkdownV2(text);\n\nreturn {\"json\":{\"text\":text}};"
      },
      "id": "9994bd61-7c76-4adc-b735-ec7f426bef7d",
      "name": "Escape Markdown Ouput",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        700
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {}
      },
      "id": "d09125b8-700f-4252-888f-ef167d4f5e7a",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        380,
        1380
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "924863d9-1179-406d-bcad-a93118db178d",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        920,
        1380
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let discordMessage =  $node[\"mission\"].json.kin + \" (Output Producteur) (Execution #\" + $execution.id + \") - \" + $node[\"mission\"].json.mailSubject + \": \\n\\n\" + $node[\"mission\"].json.output + \"\\n\\n---\\n\\n\" + $node[\"mission\"].json.kin + \" (Nouvelles Instructions) (Execution #\" + $node[\"entree\"].json.executionId + \") - \" + $node[\"mission\"].json.mailSubject + \": \\n\\n\" + $node[\"mission\"].json.instructions;\n\nlet chunks = [];\n\n// Taille maximale de chaque morceau\nconst chunkSize = 1990;\n\nfor (let i = 0; i < discordMessage.length; i += chunkSize) {\n    // Découper le message en sous-chaînes de 1990 caractères\n    const chunk = discordMessage.substring(i, i + chunkSize);\n    chunks.push(chunk);\n}\n\nreturn {\"json\": {\"chunks\": chunks}};"
      },
      "id": "e3bb4de1-4733-4534-89aa-a9bf0fd55e65",
      "name": "chunks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        1380
      ]
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "={{ $json.chunks }}",
        "options": {
          "username": "={{ $item(0).node[\"mission\"].json.kin?$item(0).node[\"mission\"].json.kin:\"kin\" }}"
        }
      },
      "id": "67637a84-536b-4ce9-a68b-16db66b63581",
      "name": "Discord",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        640,
        1380
      ],
      "credentials": {
        "discordWebhookApi": {
          "id": "gTy4b53yavn87fHw",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\"json\": {\"response\" : \"Notifications envoyées !\"}};"
      },
      "id": "63f8f6d7-39dc-46e2-b683-13571f00f9c5",
      "name": "response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        420
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function escapeMarkdownV2(text) {\n    return text.replace(/[_*\\[\\]()~`>#\\+=\\-{}\\.!|]/g, match => '\\\\' + match)\n               .replace(/(\\n```)([a-z]*\\n[\\s\\S]+?\\n```)/g, (match, p1, p2) => p1.replace('\\n', '') + p2);\n}\n\nlet json = $node[\"mission\"].json;\n\nlet text = json.instructions;\nif (text.length > 3900) {\n  text = \"[...]\" + text.substring(text.length - 3900); \n}\ntext = json.kin + \" (Nouvelles Instructions) (Execution #\" + $node[\"entree\"].json.executionId + \") - \" + json.threadSubject + \": \\n\\n\" + text;\ntext = escapeMarkdownV2(text);\n\nreturn {\"json\":{\"text\":text}};"
      },
      "id": "764524a5-08e4-4df8-b4eb-974591df2a28",
      "name": "Escape Markdown",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        900
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "id": "6e8e70f7-a82a-4849-a25a-e64048b77e05",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1780,
        420
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9ce4b36c-1794-45b7-9546-eec250840359",
              "leftValue": "={{ $node[\"mission\"].json.output }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3cdd3485-f550-48e3-8b86-2acfda94e5f2",
      "name": "If output",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -40,
        700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9ce4b36c-1794-45b7-9546-eec250840359",
              "leftValue": "={{ $node[\"mission\"].json.instructions }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1e87692d-b6e9-47bd-86fe-2147e441113a",
      "name": "If insructions",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -40,
        900
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $node[\"telegramChatId\"].json.telegramChatId }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "disable_notification": true,
          "parse_mode": "MarkdownV2"
        }
      },
      "id": "00ff0a66-9b7b-4a0f-b754-de55773d301d",
      "name": "Send Log",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1260,
        760
      ],
      "credentials": {
        "telegramApi": {
          "id": "ZycPeiDd8w3TWjiS",
          "name": "digitalkin_bot Telegram"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $json;\n\nreturn {\"json\": json};"
      },
      "id": "23c1e6db-5444-41ce-ac0b-d86e6c8ed6a2",
      "name": "entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        460
      ]
    },
    {
      "parameters": {
        "workflowId": "HLDDZOmG8kuk2zTi",
        "options": {}
      },
      "id": "7932b7fe-b9c8-4c45-9c4b-eb2fbfcc3b46",
      "name": "CRUD Mission : Read",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -740,
        460
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = {};\n\njson.query = \"/crud_mission/read\";\njson.missionId = $node[\"entree\"].json.missionId;\n\nreturn {\"json\": json};"
      },
      "id": "a7e3b85a-e7c6-4577-89bf-8475d60fa2b3",
      "name": "/crud_mission/read",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        460
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\"json\":JSON.parse($json.response)};"
      },
      "id": "32b7055f-154d-44c4-ad0d-554b76c17110",
      "name": "mission",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -540,
        460
      ]
    },
    {
      "parameters": {
        "content": "## CRUD Mission\nhttps://kins.app.n8n.cloud/workflow/HLDDZOmG8kuk2zTi",
        "height": 274.5517166627047,
        "width": 250.71967654986526
      },
      "id": "9957710d-7b35-4c47-ba23-096f971b858f",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -820,
        340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8ce330e8-c577-4690-a30a-4ef32292898c",
              "leftValue": "={{ $node[\"mission\"].json.mailId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "9696def2-fd59-41ff-9016-4b04f6e6fd7d",
              "leftValue": "={{ $node[\"mission\"].json.threadId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b2c0679a-c0fa-4ace-a50b-413a1bdb9633",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -40,
        1160
      ]
    },
    {
      "parameters": {
        "content": "## RESPONSE KIN PROCESS ",
        "height": 279.2284703892785,
        "width": 539.624187719576
      },
      "id": "4c9d5ed9-ef53-401f-b3f0-ebae2adf90ae",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        560,
        1060
      ]
    },
    {
      "parameters": {
        "jsCode": "let json = {};\n\njson.role = \"Kin\";\njson.status = $node[\"mission\"].json.status;\njson.content = $node[\"mission\"].json.instructions;\njson.createdAt = $node[\"mission\"].json.date;\njson.id = $node[\"mission\"].json.executionId;\njson.originId = $node[\"mission\"].json.threadId;\njson.assignment = $node[\"mission\"].json.mission;\njson.model = $node[\"mission\"].json.kin;\n\nreturn json;"
      },
      "id": "c4f25a75-8aac-4dbe-ad63-9d3a759b0d27",
      "name": "Response formating",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        1160
      ]
    },
    {
      "parameters": {
        "projectId": "kincir-9369f-default-rtdb",
        "path": "={{ \"conversations/\" + $node[\"Response formating\"].json.originId + \"/responses/\" + $node[\"Response formating\"].json.id }}",
        "attributes": "id, originId, assignment, kinChatId, role, status, model, content, createdAt"
      },
      "id": "7c07d5aa-9d4c-464f-8eda-8fe57c849cc9",
      "name": "Store responses",
      "type": "n8n-nodes-base.googleFirebaseRealtimeDatabase",
      "typeVersion": 1,
      "position": [
        920,
        1160
      ],
      "credentials": {
        "googleFirebaseRealtimeDatabaseOAuth2Api": {
          "id": "OVSbgNbwKqSqujMP",
          "name": "Google Firebase Realtime Database account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "15106846-6a72-4b99-970e-8c45d0a0be4e",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "adff18e1-3e9f-4bcc-94a3-7a95ee7740c2",
              "leftValue": "={{ $json.role }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "58b9419b-21ad-44fd-a51a-d3e4ecd5bde3",
              "leftValue": "={{ $json.status }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "e9d97c33-1497-4fbe-bef2-712a70eab73d",
              "leftValue": "={{ $json.content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "bc0a9dc3-eb20-460e-a7dd-46608a0e12bd",
              "leftValue": "={{ $json.createdAt }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "debab90b-4c13-4c5b-8be8-70339167c110",
              "leftValue": "={{ $json.assignment }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "2551ab35-e621-4b2c-9154-2795d51fbab4",
              "leftValue": "={{ $json.model }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0e331fcd-ff55-45dd-a546-8c201f8a49a6",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        640,
        1160
      ]
    },
    {
      "parameters": {
        "workflowId": "gdFeXvXoLRHkWsrB",
        "options": {}
      },
      "id": "f1f71599-5fbe-4dad-8a1e-47ca09126c90",
      "name": "kins",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -300,
        460
      ]
    },
    {
      "parameters": {
        "content": "## Get Kins Actifs\nhttps://kins.app.n8n.cloud/workflow/gdFeXvXoLRHkWsrB",
        "height": 274.5517166627047,
        "width": 250.71967654986526
      },
      "id": "69a2bf03-9356-4a7c-8644-22777dd34b68",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -380,
        340
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let telegramChatId;\nlet missionKin = null;\n\nif ($node[\"mission\"].json.kin) {\n  missionKin = $node[\"mission\"].json.kin.toLowerCase();\n}\n\nconst kinObject = $json.kin.find(kin => kin.kin === missionKin);\n\ntelegramChatId = kinObject && kinObject.telegramChatId ? kinObject.telegramChatId : -4155607972;\n\nreturn {\"telegramChatId\": telegramChatId};"
      },
      "id": "dee239dd-858e-4e12-92fb-9beb5af69e5c",
      "name": "telegramChatId",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        460
      ]
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "output": "[CONTENU - Réponse au Besoin Informationnel]\n\n**ACTION 3 - Rédaction du Contenu de la Demande :**\n\nPréparez le contenu détaillé de la mission, en incluant toutes les informations nécessaires pour que le Kin sélectionné puisse démarrer efficacement. Utilisez une structure claire, avec les balises **CONTENU** et **PROCESSUS**, pour articuler cette information. N'oubliez pas d'indiquer le nom du Kin sélectionné avant le titre de la balise.\n\n    [CONTENU - Nouvelle Mission %NomduKin% : Titre de la mission]\n    \n    **[PROCESSUS - Nouvelle Mission %NomduKin% : Titre de la mission]**\n    \n    Fournissez ici un cadrage détaillé de la mission et toutes les informations nécessaires.\n    \n    **[/PROCESSUS - Nouvelle Mission %NomduKin% : Titre de la mission]**\n    \n    [/CONTENU - Nouvelle Mission %NomduKin% : Titre de la mission]\n\n[/CONTENU - Réponse au Besoin Informationnel]\n\n---"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Nico reçoit un email": {
      "lastTimeChecked": 1706088137,
      "possibleDuplicates": [
        "18d3ac70312f4667"
      ]
    },
    "node:Seb reçoit un email": {
      "lastTimeChecked": 1706023258
    },
    "node:Kin Mail": {
      "lastTimeChecked": 1706305011,
      "possibleDuplicates": [
        "18d47b488e5cab95"
      ]
    }
  },
  "tags": [
    {
      "createdAt": "2024-01-21T09:46:57.068Z",
      "updatedAt": "2024-01-21T09:46:57.068Z",
      "id": "O7AwhYu4Pf4sOOHS",
      "name": "beta"
    },
    {
      "createdAt": "2023-12-17T10:32:35.457Z",
      "updatedAt": "2023-12-17T10:32:35.457Z",
      "id": "y4SS6pvxfLMwCsGn",
      "name": "service"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-02-16T20:33:51.000Z",
  "versionId": "c1cf22eb-3270-484b-8cd7-584b4611777c"
}