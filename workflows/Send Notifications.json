{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escape Markdown Ouput": {
      "main": [
        [
          {
            "node": "Send Log",
            "type": "main",
            "index": 0
          },
          {
            "node": "If boiron",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entree": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "If output",
            "type": "main",
            "index": 0
          },
          {
            "node": "If insructions",
            "type": "main",
            "index": 0
          },
          {
            "node": "chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chunks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discord": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Escape Markdown": {
      "main": [
        [
          {
            "node": "Send Log",
            "type": "main",
            "index": 0
          },
          {
            "node": "If boiron",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If output": {
      "main": [
        [
          {
            "node": "Escape Markdown Ouput",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If insructions": {
      "main": [
        [
          {
            "node": "Escape Markdown",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Send Log": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If boiron": {
      "main": [
        [
          {
            "node": "Send Log Boiron",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Send Log Boiron": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-27T13:03:44.164Z",
  "id": "EYWde6gUS9Qq2ok7",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Send Notifications",
  "nodes": [
    {
      "parameters": {},
      "id": "fa64a015-6ba6-4159-8ff3-e52c0a382b33",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -520,
        480
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function escapeMarkdownV2(text) {\n    return text.replace(/[_*\\[\\]()~`>#\\+=\\-{}\\.!|]/g, match => '\\\\' + match)\n               .replace(/(\\n```)([a-z]*\\n[\\s\\S]+?\\n```)/g, (match, p1, p2) => p1.replace('\\n', '') + p2);\n}\n\nlet json = $node[\"entree\"].json;\n\nlet text = json.output;\nif (text.length > 3900) {\n  text = \"[...]\" + text.substring(text.length - 3900); \n}\ntext = json.kin + \" (Output Producteur) (Execution #\" + json.executionId + \") - \" + json.mailSubject + \": \\n\\n\" + text;\ntext = escapeMarkdownV2(text);\n\nreturn {\"json\":{\"text\":text}};"
      },
      "id": "9994bd61-7c76-4adc-b735-ec7f426bef7d",
      "name": "Escape Markdown Ouput",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        700
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $json;\n\nreturn {\"json\": json};"
      },
      "id": "3518adda-1f63-4ad1-9310-7cda4fdb3931",
      "name": "entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -300,
        480
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {}
      },
      "id": "d09125b8-700f-4252-888f-ef167d4f5e7a",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        420,
        1100
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "924863d9-1179-406d-bcad-a93118db178d",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        860,
        1100
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let discordMessage =  $node[\"entree\"].json.kin + \" (Output Producteur) (Execution #\" + $execution.id + \") - \" + $node[\"entree\"].json.mailSubject + \": \\n\\n\" + $node[\"entree\"].json.output + \"\\n\\n---\\n\\n\" + $node[\"entree\"].json.kin + \" (Nouvelles Instructions) (Execution #\" + $node[\"entree\"].json.executionId + \") - \" + $node[\"entree\"].json.mailSubject + \": \\n\\n\" + $node[\"entree\"].json.instructions;\n\nlet chunks = [];\n\n// Taille maximale de chaque morceau\nconst chunkSize = 1990;\n\nfor (let i = 0; i < discordMessage.length; i += chunkSize) {\n    // Découper le message en sous-chaînes de 1990 caractères\n    const chunk = discordMessage.substring(i, i + chunkSize);\n    chunks.push(chunk);\n}\n\nreturn {\"json\": {\"chunks\": chunks}};"
      },
      "id": "e3bb4de1-4733-4534-89aa-a9bf0fd55e65",
      "name": "chunks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        1100
      ]
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "={{ $json.chunks }}",
        "options": {
          "username": "={{ $item(0).node[\"entree\"].json.kin?$item(0).node[\"entree\"].json.kin:\"kin\" }}"
        }
      },
      "id": "67637a84-536b-4ce9-a68b-16db66b63581",
      "name": "Discord",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        640,
        1100
      ],
      "credentials": {
        "discordWebhookApi": {
          "id": "gTy4b53yavn87fHw",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\"json\": {\"response\" : \"Notifications envoyées !\"}};"
      },
      "id": "63f8f6d7-39dc-46e2-b683-13571f00f9c5",
      "name": "response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        480
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function escapeMarkdownV2(text) {\n    return text.replace(/[_*\\[\\]()~`>#\\+=\\-{}\\.!|]/g, match => '\\\\' + match)\n               .replace(/(\\n```)([a-z]*\\n[\\s\\S]+?\\n```)/g, (match, p1, p2) => p1.replace('\\n', '') + p2);\n}\n\nlet json = $node[\"entree\"].json;\n\nlet text = json.instructions;\nif (text.length > 3900) {\n  text = \"[...]\" + text.substring(text.length - 3900); \n}\ntext = json.kin + \" (Nouvelles Instructions) (Execution #\" + json.executionId + \") - \" + json.mailSubject + \": \\n\\n\" + text;\ntext = escapeMarkdownV2(text);\n\nreturn {\"json\":{\"text\":text}};"
      },
      "id": "764524a5-08e4-4df8-b4eb-974591df2a28",
      "name": "Escape Markdown",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        900
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "id": "6e8e70f7-a82a-4849-a25a-e64048b77e05",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1140,
        480
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9ce4b36c-1794-45b7-9546-eec250840359",
              "leftValue": "={{ $node[\"entree\"].json.output }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3cdd3485-f550-48e3-8b86-2acfda94e5f2",
      "name": "If output",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -40,
        700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9ce4b36c-1794-45b7-9546-eec250840359",
              "leftValue": "={{ $node[\"entree\"].json.instructions }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1e87692d-b6e9-47bd-86fe-2147e441113a",
      "name": "If insructions",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -40,
        900
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "9ce4b36c-1794-45b7-9546-eec250840359",
              "leftValue": "={{ $node[\"entree\"].json.kin }}",
              "rightValue": "kinlca",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "1f97f9ee-2699-453a-adef-a2bdb4424f04",
      "name": "If boiron",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        880
      ]
    },
    {
      "parameters": {
        "chatId": "-1002105587743",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "disable_notification": true,
          "parse_mode": "MarkdownV2"
        }
      },
      "id": "00ff0a66-9b7b-4a0f-b754-de55773d301d",
      "name": "Send Log",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        680,
        700
      ],
      "credentials": {
        "telegramApi": {
          "id": "lCt7ijUIUZl2RYIR",
          "name": "KinCIR Dynergie"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "-4042572972",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "disable_notification": true,
          "parse_mode": "MarkdownV2"
        }
      },
      "id": "2ac19bfe-b239-4c61-8c76-e9956009c212",
      "name": "Send Log Boiron",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        920,
        880
      ],
      "credentials": {
        "telegramApi": {
          "id": "C7R9VmqdsXqL4lOZ",
          "name": "Boiron RSI"
        }
      },
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Nico reçoit un email": {
      "lastTimeChecked": 1706088137,
      "possibleDuplicates": [
        "18d3ac70312f4667"
      ]
    },
    "node:Seb reçoit un email": {
      "lastTimeChecked": 1706023258
    },
    "node:Kin Mail": {
      "lastTimeChecked": 1706305011,
      "possibleDuplicates": [
        "18d47b488e5cab95"
      ]
    }
  },
  "tags": [
    {
      "createdAt": "2024-01-21T09:46:57.068Z",
      "updatedAt": "2024-01-21T09:46:57.068Z",
      "id": "O7AwhYu4Pf4sOOHS",
      "name": "beta"
    },
    {
      "createdAt": "2023-12-17T10:32:35.457Z",
      "updatedAt": "2023-12-17T10:32:35.457Z",
      "id": "y4SS6pvxfLMwCsGn",
      "name": "service"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-02-06T09:03:08.000Z",
  "versionId": "34df59e9-f056-4c1e-aff2-29318c31ce73"
}