{
  "active": false,
  "connections": {
    "entree": {
      "main": [
        [
          {
            "node": "GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert mission": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Fetch return mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clean updated mission": {
      "main": [
        [
          {
            "node": "Upsert mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Attribute": {
      "main": [
        [
          {
            "node": "clean updated mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "nouvelleMission entree": {
      "main": [
        [
          {
            "node": "clean updated mission1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch mission": {
      "main": [
        [
          {
            "node": "If mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If create": {
      "main": [
        [
          {
            "node": "Create File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If create1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If read": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If update": {
      "main": [
        [
          {
            "node": "Edit FILE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clean updated mission1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "BOUCLE DE MANAGEMENT",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upsert mission1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert mission1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If mission": {
      "main": [
        [
          {
            "node": "mission2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If ameliorationContinue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BOUCLE DE MANAGEMENT": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If ameliorationContinue": {
      "main": [
        [
          {
            "node": "mission ameliorationContinue",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "mission2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mission ameliorationContinue": {
      "main": [
        [
          {
            "node": "nouvelleMission ameliorationContinue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "nouvelleMission ameliorationContinue": {
      "main": [
        [
          {
            "node": "CRUD Mission : Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CRUD Mission : Create": {
      "main": [
        [
          {
            "node": "mission2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch return mission": {
      "main": [
        [
          {
            "node": "return mission",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "return mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If missionId": {
      "main": [
        [
          {
            "node": "Fetch mission",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "missionId": {
      "main": [
        [
          {
            "node": "If missionId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clean updated mission2": {
      "main": [
        [
          {
            "node": "Upsert mission2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Attribute1": {
      "main": [
        [
          {
            "node": "clean updated mission2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert mission2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate UUID": {
      "main": [
        [
          {
            "node": "nouvelleMission entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If delete": {
      "main": [
        [
          {
            "node": "Delete FILE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub": {
      "main": [
        [
          {
            "node": "If FILE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get FILE": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If FILE": {
      "main": [
        [
          {
            "node": "Get FILE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "If read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If create1": {
      "main": [
        [
          {
            "node": "Edit FILE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit FILE": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Delete FILE": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Create File": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-02-15T02:36:15.216Z",
  "id": "g3JPUsHyA5nXgkwx",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "CRUD Documentation",
  "nodes": [
    {
      "parameters": {},
      "id": "4ca1e96b-8083-4552-989e-e9e92a04fb0b",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -1800,
        -1140
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $json;\n\nif (json.chatInput) {\n  json.query = json.chatInput;\n  json.kinDemandeur = \"Un humain\";\n}\n\njson.query = json.query.trim();\n\n// DÃ©tecter la commande\nlet regexCommand = /\\/crud\\_docs\\/([a-zA-Z0-9\\_\\-]+)/i;\njson.command = \"\";\nlet matchCommand = json.query.match(regexCommand);\nif (matchCommand) {\n    json.command = matchCommand[1];\n}\n\nlet regexFirstAttribute = /\\/crud\\_docs\\/[a-zA-Z0-9\\_\\-]+\\/([a-zA-Z0-9\\_\\-.]+)/i;\nlet matchFirstAttribute = json.query.match(regexFirstAttribute);\nif (matchFirstAttribute) {\n  json.firstAttribute = matchFirstAttribute[1];\n}\n\nlet regexAllCommand = /\\/\\S+ /;\njson.commandText = \"\";\nlet matchAllCommand = json.query.match(regexAllCommand);\nif (matchAllCommand) {\n  let startIndex = matchAllCommand[0].length;\n  json.commandText = json.query.substring(startIndex);\n}\n\njson.date = $now.toString();\n$execution.customData.set(\"kin\", String(json.kin));\n\nreturn {\"json\": json};"
      },
      "id": "22d2ebc3-9e6d-4c61-ac51-33cbbd03c90e",
      "name": "entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1640,
        -1140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}vectors/upsert",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"missions\",\n\"vectors\": {\n\"id\": \"{{ $json.missionId }}\",\n\"metadata\": {{ JSON.stringify($json) }},\n\"values\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }}\n}\n}",
        "options": {}
      },
      "id": "44aa96bc-fadb-412a-8874-e2ef7aa9f65b",
      "name": "Upsert mission",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -40,
        2300
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# /crud_mission/update/attributeName value",
        "height": 298.13044544905085,
        "width": 891.7265056155782
      },
      "id": "cbe38f34-e59f-4cbf-a6b3-a08c27b606c7",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -780,
        2200
      ]
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "id": "1850c337-4fe4-4a7d-9670-98af3306bccf",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        200,
        580
      ]
    },
    {
      "parameters": {},
      "id": "92bd894a-b80b-4d55-ac7f-1979b81d464c",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        420,
        580
      ]
    },
    {
      "parameters": {
        "content": "# /crud_mission/create %missionDescription%",
        "height": 670.0298393503322,
        "width": 905.1028940671356
      },
      "id": "3e29aa0f-1386-4370-8932-49732cc5b680",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -860,
        1360
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function truncateStringsInJson(obj) {\n    // VÃ©rifier si l'objet est null ou undefined\n    if (obj === null || obj === undefined) {\n        return obj;\n    }\n\n    // Parcourir les propriÃ©tÃ©s de l'objet\n    for (let key in obj) {\n        if (typeof obj[key] === 'string' && key !== \"json\") {\n            // Tronquer les strings Ã  500 caractÃ¨res et ajouter \"[...]\" si nÃ©cessaire\n            if (obj[key].length > 5000) {\n                obj[key] = obj[key].substring(0, 5000) + \"[...]\";\n            }\n        } else if (typeof obj[key] === 'object') {\n            // Pas d'objets possible en metadata\n            obj[key] = JSON.stringify(obj[key]).substring(0, 5000);\n\n            if (obj[key].length >= 5000) {\n              obj[key] += \"[...]\";\n            }\n        }\n    }\n\n    return obj;\n}\n\n// Function to remove null attributes from a JSON object\nfunction removeNullAttributes(obj) {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] === null || obj[key] == \"\") {\n            delete obj[key];\n        } else if (typeof obj[key] === 'object') {\n            // Recursive call for nested objects\n            removeNullAttributes(obj[key]);\n        }\n    });\n}\n\nlet json = JSON.parse(JSON.stringify($json));\n\ndelete json.json;\ndelete json.query;\ndelete json.response;\ndelete json.command;\ndelete json.chatInput;\ndelete json.textCommand;\ndelete json.action;\ndelete json.sessionId;\ndelete json.responseFormat;\n\ndelete json.thread;\ndelete json.entireThread;\ndelete json.promptProducteur;\n\n\njson = truncateStringsInJson(json);\n\n// Remove threads from the json object\nremoveNullAttributes(json);\n\nif (json.mission)  {\n  json.mission = json.mission.length > 10000 ? \"[...]\" : \"\" + json.mission.substring(json.mission.length - 10000);\n}\n\nreturn {\"json\": json};"
      },
      "id": "230c94c5-3aeb-4565-b0ea-d3938023a7ce",
      "name": "clean updated mission",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -180,
        2300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "$execution.customData.set(\"command\", \"update\");\n\nlet json = $node[\"mission2\"].json;\n\njson.commandText = $node[\"entree\"].json.commandText;\n\nif ($node[\"entree\"].json.firstAttribute) {\n  json[$node[\"entree\"].json.firstAttribute] = $node[\"entree\"].json.commandText;\n  $execution.customData.set(\"attribute\", $node[\"entree\"].json.firstAttribute);\n}\n\nreturn {\"json\": json};"
      },
      "id": "b979f754-6fa9-4cf0-9935-1afa01a74253",
      "name": "Update Attribute",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        2300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "$execution.customData.set(\"command\", \"create\");\n\nlet json = $node[\"mission2\"].json;\n\njson.kin = $node[\"entree\"].json.firstAttribute;\njson.dernierProducteur = $node[\"entree\"].json.firstAttribute;\n\njson.missionIdDemandeur = $node[\"entree\"].json.missionId;\njson.missionDemandeur = $node[\"entree\"].json.mission;\njson.mission = $node[\"entree\"].json.commandText;\njson.instructions = \"LANCEMENT :C'est le dÃ©but de la mission ! RÃ©alise la prÃ©paration pour lancer la mission\";\n\ndelete chatInput;\ndelete query;\n\njson.missionId = $node[\"Generate UUID\"].json.id;\njson.status = \"doing\";\njson.execution = \"doing\"; \n\nreturn {\"json\": json};"
      },
      "id": "495eb2bf-addd-4983-bec7-1143dbbae76c",
      "name": "nouvelleMission entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -804,
        1474
      ]
    },
    {
      "parameters": {
        "url": "={{ $vars.vectorDatabaseEndpoint }}vectors/fetch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"missions\",\n\"ids\": [\"{{ $json.missionId }}\"]\n}",
        "options": {}
      },
      "id": "7804f555-f38b-44dc-a38a-8bcc7605385c",
      "name": "Fetch mission",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -1300,
        620
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $('entree').item.json.command }}",
              "rightValue": "create",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "7b3ca7fd-d240-417e-8b81-187c530393a2",
              "leftValue": "={{ $('Get FILE').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "ce75585f-c6a8-403a-ab4f-abd16b2959bb",
      "name": "If create",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -740,
        -540
      ]
    },
    {
      "parameters": {
        "content": "# /crud_mission/read/%missionId%",
        "height": 775.134184184043,
        "width": 1927.2013601257386
      },
      "id": "c4bf2196-8016-44fb-81aa-cbf1ed1a477c",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1883.2385411046137,
        440
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $node[\"entree\"].json.command }}",
              "rightValue": "read",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "bbbc6e34-b7f6-4a38-8f2a-52261895f982",
      "name": "If read",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -740,
        -1140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $node[\"entree\"].json.command }}",
              "rightValue": "update",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "d1f424b6-e522-427e-97a1-5596fc3f86f2",
      "name": "If update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -740,
        -940
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}vectors/upsert",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"missions\",\n\"vectors\": {\n\"id\": \"{{ $json.missionId }}\",\n\"metadata\": {{ JSON.stringify($json) }},\n\"values\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }}\n}\n}",
        "options": {}
      },
      "id": "f4a8af5e-7833-4fcb-be2d-4d479fe79a10",
      "name": "Upsert mission1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -324,
        1614
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function truncateStringsInJson(obj) {\n    // VÃ©rifier si l'objet est null ou undefined\n    if (obj === null || obj === undefined) {\n        return obj;\n    }\n\n    // Parcourir les propriÃ©tÃ©s de l'objet\n    for (let key in obj) {\n        if (typeof obj[key] === 'string' && key !== \"json\") {\n            // Tronquer les strings Ã  500 caractÃ¨res et ajouter \"[...]\" si nÃ©cessaire\n            if (obj[key].length > 5000) {\n                obj[key] = obj[key].substring(0, 5000) + \"[...]\";\n            }\n        } else if (typeof obj[key] === 'object') {\n            // Pas d'objets possible en metadata\n            obj[key] = JSON.stringify(obj[key]).substring(0, 5000);\n\n            if (obj[key].length >= 5000) {\n              obj[key] += \"[...]\";\n            }\n        }\n    }\n\n    return obj;\n}\n\n// Function to remove null attributes from a JSON object\nfunction removeNullAttributes(obj) {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] === null || obj[key] == \"\") {\n            delete obj[key];\n        } else if (typeof obj[key] === 'object') {\n            // Recursive call for nested objects\n            removeNullAttributes(obj[key]);\n        }\n    });\n}\n\nlet json = JSON.parse(JSON.stringify($json));\n\ndelete json.json;\ndelete json.query;\ndelete json.response;\ndelete json.command;\ndelete json.chatInput;\ndelete json.textCommand;\ndelete json.action;\ndelete json.sessionId;\ndelete json.responseFormat;\n\ndelete json.thread;\ndelete json.entireThread;\ndelete json.promptProducteur;\n\n\njson = truncateStringsInJson(json);\n\n// Remove threads from the json object\nremoveNullAttributes(json);\n\nif (json.mission)  {\n  json.mission = json.mission.length > 10000 ? \"[...]\" : \"\" + json.mission.substring(json.mission.length - 10000);\n}\n\nreturn {\"json\": json};"
      },
      "id": "e8e35c55-e477-434f-9fb5-909b2e263d84",
      "name": "clean updated mission1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -544,
        1474
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ Object.keys($json.vectors).length > 0 }}",
              "rightValue": "read",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "a63d3f7a-5685-4bf5-99a3-3820eba205fc",
      "name": "If mission",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1080,
        620
      ]
    },
    {
      "parameters": {
        "errorMessage": "commande non gÃ©rÃ©e"
      },
      "id": "a60975bb-a4a8-4a0a-9fd6-fe48002597f0",
      "name": "Stop and Error2",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -660,
        2900
      ]
    },
    {
      "parameters": {
        "content": "## BOUCLE DE MANAGEMENT\nhttps://kins.app.n8n.cloud/workflow/0LhMxlt62MaWdiqs",
        "height": 316.5612059988846,
        "width": 250.71967654986526
      },
      "id": "7d0bf1e5-a9e5-414d-bcdd-cc82a862bb23",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -384,
        1754
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://kins.app.n8n.cloud/webhook/boucle-de-management",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "7c5a182d-57d1-4df3-95f5-b3f542d5a871",
      "name": "BOUCLE DE MANAGEMENT",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -324,
        1834
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $node[\"entree\"].json.command }}",
              "rightValue": "delete",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "3b2552c0-8ead-4123-820e-ea2ba5e08c30",
      "name": "If delete",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -740,
        -740
      ]
    },
    {
      "parameters": {
        "content": "# /crud_mission/delete/%missionId%",
        "height": 298.13044544905085,
        "width": 891.7265056155782
      },
      "id": "87e27920-f100-40af-a1de-514dcf684cd2",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        2540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "1d0aa4d1-615e-4ffc-ac0b-f029c35259d3",
              "leftValue": "={{ $node[\"entree\"].json.missionId }}",
              "rightValue": "ameliorationContinue",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true,
          "looseTypeValidation": true
        }
      },
      "id": "612cd012-2b58-42e1-9804-f97860113c40",
      "name": "If ameliorationContinue",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1700,
        960
      ]
    },
    {
      "parameters": {
        "content": "## CRUD Mission\nhttps://kins.app.n8n.cloud/workflow/HLDDZOmG8kuk2zTi",
        "height": 274.5517166627047,
        "width": 250.71967654986526
      },
      "id": "805dd559-737f-4e21-b656-109d8ac72079",
      "name": "Sticky Note22",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1060,
        840
      ]
    },
    {
      "parameters": {
        "workflowId": "HLDDZOmG8kuk2zTi",
        "options": {}
      },
      "id": "f0284d5d-f35b-4b07-a3d5-a4863d0d5423",
      "name": "CRUD Mission : Create",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -1000,
        940
      ]
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "mission",
              "stringValue": "=**PROCESSUS - MISSION : AMELIORATION CONTNIUE :**\n\nL'amÃ©lioration continue est ton objectif quand tu n'es pas assignÃ© Ã  une mission spÃ©cifique. Ton rÃ´le est de collaborer avec les autres Kins de l'Ã©quipe afin d'amÃ©liorer votre travail. \n\n===\n\n"
            }
          ]
        },
        "options": {}
      },
      "id": "74da7492-4b1d-4745-8f33-13a9594bb53e",
      "name": "mission ameliorationContinue",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        -1440,
        940
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = JSON.parse(JSON.stringify($node[\"mission2\"].json));\n\ndelete json.query;\n\n// Mettre Ã  jour le Kin\njson.threadId = \"ameliorationContinue\";\njson.type = \"ameliorationContinue\";\n\nlet regexKin = /kin[a-zA-Z0-9]{2,25}/i;\njson.kin = json.missionId.match(regexKin)[0];\n\n// Mettre Ã  jour la mission\njson.query = \"/crud_mission/create/\" + json.kin  + \" \" + $node[\"mission ameliorationContinue\"].json.mission;\njson.responseFormat = \"json\";\n\nreturn {\"json\": json};"
      },
      "id": "3ce3304d-cb64-4e62-9c0d-4f6549ee4915",
      "name": "nouvelleMission ameliorationContinue",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1220,
        940
      ]
    },
    {
      "parameters": {
        "url": "={{ $vars.vectorDatabaseEndpoint }}vectors/fetch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"missions\",\n\"ids\": [\"{{ ($node[\"entree\"].json.command === \"create\")?$node[\"nouvelleMission entree\"].json.missionId:$node[\"missionId\"].json.missionId }}\"]\n}",
        "options": {}
      },
      "id": "7bb69126-0a2d-4d65-aced-57e22ab78524",
      "name": "Fetch return mission",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        660,
        580
      ],
      "retryOnFail": true,
      "waitBetweenTries": 1000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let entree = $item(0).$node[\"entree\"].json;\nlet json = {};\n\nif ($json.vectors && Object.keys($json.vectors).length > 0) {\n  json = $json.vectors[Object.keys($json.vectors)[0]].metadata;\n}\n\ndelete json.query;\n\nif (entree.chatInput != null) {\n  return {\"output\": JSON.stringify(json)};\n}\n\nif (entree.responseFormat === \"json\") {\n  json.response = JSON.stringify(json);\n  return {\"json\": json};\n}\n\nreturn {\"json\":{\"response\": JSON.stringify(json)}};"
      },
      "id": "6d915ae7-f8e5-4d40-ac5b-5c310b0aa937",
      "name": "return mission",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        580
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "c218e161-fe3f-442d-94ea-e9095c99823d",
              "leftValue": "={{ $json.missionId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ff81feaa-518c-4be5-b062-4be3706b9648",
      "name": "If missionId",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1560,
        620
      ]
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "missionId",
              "stringValue": "={{ $node[\"entree\"].json.missionId?$node[\"entree\"].json.missionId:$node[\"entree\"].json.firstAttribute }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b7d10b6c-e0a5-4d62-b11a-91fb9509b768",
      "name": "missionId",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        -1780,
        620
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}vectors/upsert",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"missions\",\n\"vectors\": {\n\"id\": \"{{ $json.missionId }}\",\n\"metadata\": {{ JSON.stringify($json) }},\n\"values\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }}\n}\n}",
        "options": {}
      },
      "id": "d23a172e-1531-4171-b063-7322ee180915",
      "name": "Upsert mission2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        0,
        2620
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function truncateStringsInJson(obj) {\n    // VÃ©rifier si l'objet est null ou undefined\n    if (obj === null || obj === undefined) {\n        return obj;\n    }\n\n    // Parcourir les propriÃ©tÃ©s de l'objet\n    for (let key in obj) {\n        if (typeof obj[key] === 'string' && key !== \"json\") {\n            // Tronquer les strings Ã  500 caractÃ¨res et ajouter \"[...]\" si nÃ©cessaire\n            if (obj[key].length > 5000) {\n                obj[key] = obj[key].substring(0, 5000) + \"[...]\";\n            }\n        } else if (typeof obj[key] === 'object') {\n            // Pas d'objets possible en metadata\n            obj[key] = JSON.stringify(obj[key]).substring(0, 5000);\n\n            if (obj[key].length >= 5000) {\n              obj[key] += \"[...]\";\n            }\n        }\n    }\n\n    return obj;\n}\n\n// Function to remove null attributes from a JSON object\nfunction removeNullAttributes(obj) {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] === null || obj[key] == \"\") {\n            delete obj[key];\n        } else if (typeof obj[key] === 'object') {\n            // Recursive call for nested objects\n            removeNullAttributes(obj[key]);\n        }\n    });\n}\n\nlet json = JSON.parse(JSON.stringify($json));\n\ndelete json.json;\ndelete json.query;\ndelete json.response;\ndelete json.command;\ndelete json.chatInput;\ndelete json.textCommand;\ndelete json.action;\ndelete json.sessionId;\ndelete json.responseFormat;\n\ndelete json.thread;\ndelete json.entireThread;\ndelete json.promptProducteur;\n\n\njson = truncateStringsInJson(json);\n\n// Remove threads from the json object\nremoveNullAttributes(json);\n\nif (json.mission)  {\n  json.mission = json.mission.length > 10000 ? \"[...]\" : \"\" + json.mission.substring(json.mission.length - 10000);\n}\n\nreturn {\"json\": json};"
      },
      "id": "799dc8b9-e72e-4c9f-8d42-cfcf1f0888e9",
      "name": "clean updated mission2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        2620
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "$execution.customData.set(\"command\", \"delete\");\n\nlet json = $node[\"mission2\"].json;\n\njson.status = \"deleted\";\njson.deleted = \"deleted\";\n\nreturn {\"json\": json};"
      },
      "id": "1bd8d424-39cd-4b0d-9c11-4aca8c1e4f8c",
      "name": "Update Attribute1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        2620
      ]
    },
    {
      "parameters": {
        "action": "generate",
        "dataPropertyName": "id"
      },
      "id": "406d8463-12e6-4a8a-896f-0760efa05686",
      "name": "Generate UUID",
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        -1000,
        1480
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "$execution.customData.set(\"command\", \"read\");\nlet json = $node[\"entree\"].json;\n\nif (Object.keys($json.vectors).length > 0) {\n  json = $json.vectors[Object.keys($json.vectors)[0]].metadata;\n}\n\nreturn {\"json\": json};"
      },
      "id": "01d85ae6-3828-4a60-9c0f-eb18f28373fe",
      "name": "mission2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        600
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "list",
        "owner": {
          "__rl": true,
          "value": "DigitalKin-ai",
          "mode": "list",
          "cachedResultName": "DigitalKin-ai",
          "cachedResultUrl": "https://github.com/DigitalKin-ai"
        },
        "repository": {
          "__rl": true,
          "value": "kindocs",
          "mode": "list",
          "cachedResultName": "kindocs",
          "cachedResultUrl": "https://github.com/DigitalKin-ai/kindocs"
        },
        "filePath": "=docs/"
      },
      "id": "c4a099db-d055-4c78-855d-f1f065b08c6e",
      "name": "GitHub",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -1480,
        -1140
      ],
      "credentials": {
        "githubOAuth2Api": {
          "id": "lNM7LCv7g0a8rDRT",
          "name": "Charlie Github"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "https://github.com/DigitalKin-ai/kindocs",
          "mode": "url"
        },
        "repository": {
          "__rl": true,
          "value": "https://github.com/DigitalKin-ai/kindocs",
          "mode": "url"
        },
        "filePath": "=docs/{{ $('entree').item.json.firstAttribute }}",
        "fileContent": "={{ $('entree').item.json.commandText }}",
        "commitMessage": "={{ `Update: ` + $('entree').item.json.firstAttribute }}"
      },
      "id": "0f5be76b-cc4a-49be-9cf1-f42616790aed",
      "name": "Edit FILE",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -520,
        -940
      ],
      "credentials": {
        "githubApi": {
          "id": "Q3KiSughyw3eRp87",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "https://github.com/DigitalKin-ai/kindocs",
          "mode": "url"
        },
        "repository": {
          "__rl": true,
          "value": "https://github.com/DigitalKin-ai/kindocs",
          "mode": "url"
        },
        "filePath": "=docs/{{ $('entree').item.json.firstAttribute }}",
        "fileContent": "={{ $('entree').item.json.commandText }}",
        "commitMessage": "={{ `Create: ` + $('entree').item.json.firstAttribute }}"
      },
      "id": "bce41a6f-255e-453c-a111-b614735496c0",
      "name": "Create File",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -520,
        -540
      ],
      "credentials": {
        "githubApi": {
          "id": "Q3KiSughyw3eRp87",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "delete",
        "owner": {
          "__rl": true,
          "value": "https://github.com/DigitalKin-ai/kindocs",
          "mode": "url"
        },
        "repository": {
          "__rl": true,
          "value": "https://github.com/DigitalKin-ai/kindocs",
          "mode": "url"
        },
        "filePath": "={{ `docs/` + $('entree').item.json.firstAttribute }}",
        "commitMessage": "={{ `Delete: ` + $('entree').item.json.firstAttribute }}"
      },
      "id": "455bc415-906d-49ec-a96d-65d58f6f48de",
      "name": "Delete FILE",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -520,
        -740
      ],
      "credentials": {
        "githubApi": {
          "id": "Q3KiSughyw3eRp87",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "CRUD Doc error"
      },
      "id": "5a8abfb8-3830-4529-8448-19d97a8d2ecc",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -740,
        -140
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "DigitalKin-ai",
          "mode": "list",
          "cachedResultName": "DigitalKin-ai",
          "cachedResultUrl": "https://github.com/DigitalKin-ai"
        },
        "repository": {
          "__rl": true,
          "value": "kindocs",
          "mode": "list",
          "cachedResultName": "kindocs",
          "cachedResultUrl": "https://github.com/DigitalKin-ai/kindocs"
        },
        "filePath": "=docs/{{ $('entree').item.json.firstAttribute }}",
        "additionalParameters": {}
      },
      "id": "b4b08de7-2867-4b2a-8fd6-c4c421ad10c9",
      "name": "Get FILE",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -1160,
        -1140
      ],
      "credentials": {
        "githubOAuth2Api": {
          "id": "lNM7LCv7g0a8rDRT",
          "name": "Charlie Github"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $json.name }}",
              "rightValue": "={{ $('entree').item.json.firstAttribute }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "18d0fe76-f531-4c19-b055-de8d9143bda5",
      "name": "If FILE",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1320,
        -1140
      ]
    },
    {
      "parameters": {},
      "id": "81f3dfcb-3d33-4aed-a289-1a1c85ffc0bf",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -1000,
        -1140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $('entree').item.json.command }}",
              "rightValue": "create",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "7b3ca7fd-d240-417e-8b81-187c530393a2",
              "leftValue": "={{ $('Get FILE').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "220eb953-2f06-4e31-9384-b5205c631c52",
      "name": "If create1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -740,
        -340
      ]
    },
    {
      "parameters": {
        "content": "# /crud_docs/%actionType%/%actionContent%",
        "height": 1281.2643325419258,
        "width": 1898.607724430052
      },
      "id": "4ee8f25d-acf2-41fc-b430-db17c62f158f",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1880,
        -1280
      ]
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "client": "dynergie",
          "kin": "kinredacteurscientifique",
          "sourceGoogleDriveId": null,
          "threadId": "18da91546c3c7090",
          "threadSubject": "Revue de littÃ©rature - EfficacitÃ© de l'homÃ©opathie en santÃ© animale (Essai nÂ°1)",
          "threadFrom": "Lester Reynolds <lreynolds@dynergie.fr>",
          "kinDemandeur": "Lester Reynolds <lreynolds@dynergie.fr>",
          "mailId": "18da91546c3c7090",
          "mailSubject": "Revue de littÃ©rature - EfficacitÃ© de l'homÃ©opathie en santÃ© animale (Essai nÂ°1)",
          "mailFrom": "From: Lester Reynolds <lreynolds@dynergie.fr>",
          "query": "/crud_docs/create/lorem.md Lyon[c] (Franco-ProvenÃ§al: Liyon), traditionally spelled in English as Lyons,[d] is the third-largest city of France.[e] It is located at the confluence of the rivers RhÃ´ne and SaÃ´ne, to the northwest of the French Alps, 391 km (243 mi) southeast of Paris, 278 km (173 mi) north of Marseille, 113 km (70 mi) southwest of Geneva, 58 km (36 mi) northeast of Saint-Ãtienne.The City of Lyon had a population of 522,000 in 2023 within its small municipal territory of 48 km2 (19 sq mi),[14] but together with its suburbs and exurbs the Lyon metropolitan area had a population of 2,293,180 that same year,[7] the second most populated in France. Lyon and 58 suburban municipalities have formed since 2015 the Metropolis of Lyon, a directly elected metropolitan authority now in charge of most urban issues, with a population of 1,416,545 in 2020.[15] Lyon is the prefecture of the Auvergne-RhÃ´ne-Alpes region and seat of the Departmental Council of RhÃ´ne (whose jurisdiction, however, no longer extends over the Metropolis of Lyon since 2015).The capital of the Gauls during the Roman Empire, Lyon is the seat of an archbishopric whose holder bears the title of Primate of the Gauls. Lyon became a major economic hub during the Renaissance. The city is recognised for its cuisine and gastronomy, as well as historical and architectural landmarks; as such, the districts of Old Lyon, the FourviÃ¨re hill, the Presqu'Ã®le and the slopes of the Croix-Rousse are inscribed on the UNESCO World Heritage List. Lyon was historically an important area for the production and weaving of silk. Lyon played a significant role in the history of cinema since Auguste and Louis LumiÃ¨re invented the cinematograph there. The city is also known for its light festival, the FÃªte des LumiÃ¨res, which begins every 8 December and lasts for four days, earning Lyon the title of \"Capital of Lights\".Economically, Lyon is a major centre for banking, chemical, pharmaceutical and biotech industries. The city contains a significant software industry with a particular focus on video games; in recent years it has fostered a growing local start-up sector.[16] The home of renowned universities and higher education schools, Lyon is the second-largest student city in France, with a university population of nearly 200,000 students within the Metropolis of Lyon.[17] Lyon hosts the international headquarters of Interpol, the International Agency for Research on Cancer, as well as Euronews. According to the Globalization and World Rankings Research Institute, Lyon is considered a Beta city, as of 2018.[18] It ranked second in France and 40th globally in Mercer's 2019 liveability rankings.[19] "
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "any"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrencyRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2023-12-17T10:07:55.424Z",
      "updatedAt": "2023-12-20T20:25:13.009Z",
      "id": "DzuSxffpFOEBRhld",
      "name": "outil"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-02-20T09:29:19.000Z",
  "versionId": "873147c7-88d2-4dea-b5a6-e03e532fd35a"
}