{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Fetch return mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch return mission": {
      "main": [
        [
          {
            "node": "return mission",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "return mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If read": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If create": {
      "main": [
        [
          {
            "node": "create SQL request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If update": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If delete": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Postgres3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "entree": {
      "main": [
        [
          {
            "node": "If read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create SQL request": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-02-19T15:06:56.430Z",
  "id": "vaq781Tpf9Ouo7eG",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Postgres",
  "nodes": [
    {
      "parameters": {},
      "id": "3651085f-9770-42b0-91a3-d3d2c472ad36",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        260,
        340
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "test",
          "mode": "list",
          "cachedResultName": "test"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.threadId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ad5ed78f-3833-415d-ae40-09c4daa0abb0",
      "name": "Postgres",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1220,
        -60
      ],
      "credentials": {
        "postgres": {
          "id": "5581DTmXV97W2jnU",
          "name": "Railway Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "id": "6bc9376f-c4c1-4ec8-b370-d0234ce80983",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1620,
        340
      ]
    },
    {
      "parameters": {},
      "id": "bdc69763-8944-4b65-84f7-9cfc03727819",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1840,
        340
      ]
    },
    {
      "parameters": {
        "url": "={{ $vars.vectorDatabaseEndpoint }}vectors/fetch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"missions\",\n\"ids\": [\"{{ ($node[\"entree\"].json.command === \"create\")?$node[\"nouvelleMission entree\"].json.missionId:$node[\"missionId\"].json.missionId }}\"]\n}",
        "options": {}
      },
      "id": "78fc1e8f-439b-49b8-9d24-fdbb1b307d82",
      "name": "Fetch return mission",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        2080,
        340
      ],
      "retryOnFail": true,
      "waitBetweenTries": 1000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let entree = $item(0).$node[\"entree\"].json;\nlet json = {};\n\nif ($json.vectors && Object.keys($json.vectors).length > 0) {\n  json = $json.vectors[Object.keys($json.vectors)[0]].metadata;\n}\n\ndelete json.query;\n\nif (entree.chatInput != null) {\n  return {\"output\": JSON.stringify(json)};\n}\n\nif (entree.responseFormat === \"json\") {\n  json.response = JSON.stringify(json);\n  return {\"json\": json};\n}\n\nreturn {\"json\":{\"response\": JSON.stringify(json)}};"
      },
      "id": "430a7a28-e88c-471d-a7c5-38e3d6bae907",
      "name": "return mission",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        340
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "test",
          "mode": "list",
          "cachedResultName": "test"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.threadId }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "68db5584-ea52-40ca-b57d-00d2487acacd",
      "name": "Postgres1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1220,
        180
      ],
      "credentials": {
        "postgres": {
          "id": "5581DTmXV97W2jnU",
          "name": "Railway Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "test",
          "mode": "list",
          "cachedResultName": "test"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.threadId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "53cf0ab1-69d0-4804-97c9-c12d6a6feabd",
      "name": "Postgres2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1220,
        440
      ],
      "credentials": {
        "postgres": {
          "id": "5581DTmXV97W2jnU",
          "name": "Railway Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.sql }}\n{{ $json.values }}",
        "options": {}
      },
      "id": "34fa0b71-8da4-4a0a-b9d6-e3a7a4b127d3",
      "name": "Postgres3",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1220,
        700
      ],
      "credentials": {
        "postgres": {
          "id": "5581DTmXV97W2jnU",
          "name": "Railway Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $node[\"entree\"].json.command }}",
              "rightValue": "read",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "33dd06fb-5ccb-4ef4-9c94-ba4bbf11a6c4",
      "name": "If read",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        820,
        -40
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $('entree').item.json.command }}",
              "rightValue": "create",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "35fd0dc9-65b6-477b-9329-1500da3c56c7",
      "name": "If create",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        820,
        720
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $node[\"entree\"].json.command }}",
              "rightValue": "update",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "391fa93a-4f9a-43fe-9e47-df938424f90f",
      "name": "If update",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        820,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f63273fd-4900-4799-9340-1f2de05a40c4",
              "leftValue": "={{ $node[\"entree\"].json.command }}",
              "rightValue": "delete",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "ignoreCase": true
        }
      },
      "id": "08208679-61e3-41d7-afa3-2a3e09448cec",
      "name": "If delete",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        820,
        460
      ]
    },
    {
      "parameters": {
        "errorMessage": "CRUD Doc error"
      },
      "id": "65504442-be93-4729-81e9-2df3a577adce",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        800,
        940
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $json;\n\nif (json.chatInput) {\n  json.query = json.chatInput;\n  json.kinDemandeur = \"Un humain\";\n}\n\njson.query = json.query.trim();\n\n// Détecter la commande\nlet regexCommand = /\\/crud\\_postgres\\/([a-zA-Z0-9\\_\\-]+)/i;\njson.command = \"\";\nlet matchCommand = json.query.match(regexCommand);\nif (matchCommand) {\n    json.command = matchCommand[1];\n}\n\nlet regexFirstAttribute = /\\/crud\\_postgres\\/[a-zA-Z0-9\\_\\-]+\\/([a-zA-Z0-9\\_\\-]+)/i;\nlet matchFirstAttribute = json.query.match(regexFirstAttribute);\nif (matchFirstAttribute) {\n  json.firstAttribute = matchFirstAttribute[1];\n}\n\nlet regexAllCommand = /\\/\\S+ /;\njson.commandText = \"\";\nlet matchAllCommand = json.query.match(regexAllCommand);\nif (matchAllCommand) {\n  let startIndex = matchAllCommand[0].length;\n  json.commandText = json.query.substring(startIndex);\n}\n\njson.date = $now.toString();\n$execution.customData.set(\"kin\", String(json.kin));\n\nreturn {\"json\": json};"
      },
      "id": "774354fc-c28e-41fe-a31c-89d76c400c20",
      "name": "entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        340
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $json;\njson.sql = `INSERT INTO adefinir (id, content) VALUES ($1, $2)`;\njson.values = `('${$json.threadId}', '${$json.commandText}')`\n\nreturn json;"
      },
      "id": "7207e5ca-d603-4492-9be4-6790f1354b62",
      "name": "create SQL request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        700
      ]
    },
    {
      "parameters": {
        "content": "## /crud_postgres/read\n",
        "height": 197.44991646704833,
        "width": 575.8009176545343
      },
      "id": "c0f89c35-6027-43d8-b608-be94e767a17d",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        760,
        -103.74499164670482
      ]
    },
    {
      "parameters": {
        "content": "## /crud_postgres/update\n",
        "height": 197.44991646704833,
        "width": 575.8009176545343
      },
      "id": "dd00da2c-1532-4111-98fd-2f9347aa006b",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        760,
        140
      ]
    },
    {
      "parameters": {
        "content": "## /crud_postgres/delete\n",
        "height": 197.44991646704833,
        "width": 575.8009176545343
      },
      "id": "8b4bc171-b4bc-4897-8fc9-0863bc78910e",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        760,
        400
      ]
    },
    {
      "parameters": {
        "content": "## /crud_postgres/create\n",
        "height": 197.44991646704833,
        "width": 575.8009176545343
      },
      "id": "1e70311a-3401-4db8-aff3-e4df08adfe45",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        760,
        660
      ]
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "client": "dynergie",
          "kin": "kinredacteurscientifique",
          "sourceGoogleDriveId": null,
          "threadId": "32",
          "threadSubject": "Revue de littérature - Efficacité de l'homéopathie en santé animale (Essai n°1)",
          "threadFrom": "Lester Reynolds <lreynolds@dynergie.fr>",
          "kinDemandeur": "Lester Reynolds <lreynolds@dynergie.fr>",
          "mailId": "18da91546c3c7090",
          "mailSubject": "Revue de littérature - Efficacité de l'homéopathie en santé animale (Essai n°1)",
          "mailFrom": "From: Lester Reynolds <lreynolds@dynergie.fr>",
          "query": "/crud_postgres/read Lyon[c] (Franco-Provençal: Liyon), traditionally spelled in English as Lyons,[d] is the third-largest city of France.[e] It is located at the confluence of the rivers Rhône and Saône, to the northwest of the French Alps, 391 km (243 mi) southeast of Paris, 278 km (173 mi) north of Marseille, 113 km (70 mi) southwest of Geneva, 58 km (36 mi) northeast of Saint-Étienne.The City of Lyon had a population of 522,000 in 2023 within its small municipal territory of 48 km2 (19 sq mi),[14] but together with its suburbs and exurbs the Lyon metropolitan area had a population of 2,293,180 that same year,[7] the second most populated in France. Lyon and 58 suburban municipalities have formed since 2015 the Metropolis of Lyon, a directly elected metropolitan authority now in charge of most urban issues, with a population of 1,416,545 in 2020.[15] Lyon is the prefecture of the Auvergne-Rhône-Alpes region and seat of the Departmental Council of Rhône (whose jurisdiction, however, no longer extends over the Metropolis of Lyon since 2015).The capital of the Gauls during the Roman Empire, Lyon is the seat of an archbishopric whose holder bears the title of Primate of the Gauls. Lyon became a major economic hub during the Renaissance. The city is recognised for its cuisine and gastronomy, as well as historical and architectural landmarks; as such, the districts of Old Lyon, the Fourvière hill, the Presqu'île and the slopes of the Croix-Rousse are inscribed on the UNESCO World Heritage List. Lyon was historically an important area for the production and weaving of silk. Lyon played a significant role in the history of cinema since Auguste and Louis Lumière invented the cinematograph there. The city is also known for its light festival, the Fête des Lumières, which begins every 8 December and lasts for four days, earning Lyon the title of \"Capital of Lights\".Economically, Lyon is a major centre for banking, chemical, pharmaceutical and biotech industries. The city contains a significant software industry with a particular focus on video games; in recent years it has fostered a growing local start-up sector.[16] The home of renowned universities and higher education schools, Lyon is the second-largest student city in France, with a university population of nearly 200,000 students within the Metropolis of Lyon.[17] Lyon hosts the international headquarters of Interpol, the International Agency for Research on Cancer, as well as Euronews. According to the Globalization and World Rankings Research Institute, Lyon is considered a Beta city, as of 2018.[18] It ranked second in France and 40th globally in Mercer's 2019 liveability rankings.[19] "
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-02-20T09:58:36.000Z",
  "versionId": "da98daf8-2550-43d7-8d62-a61815a88370"
}