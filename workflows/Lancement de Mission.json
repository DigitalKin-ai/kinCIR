{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manager": {
      "main": [
        [
          {
            "node": "todo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "thread": {
      "main": [
        [
          {
            "node": "defaultEmbedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "todo": {
      "main": [
        [
          {
            "node": "Upsert todo",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send  Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entree": {
      "main": [
        [
          {
            "node": "thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "defaultEmbedding": {
      "main": [
        [
          {
            "node": "Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-28T18:29:15.855Z",
  "id": "DXYPhavwlYlTKPqu",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Lancement de Mission",
  "nodes": [
    {
      "parameters": {},
      "id": "af5b82ec-e492-41db-9904-9799adbd02ff",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -860,
        480
      ]
    },
    {
      "parameters": {
        "assistantId": "asst_NRJfqzvKf73U2CjrI4bqMSf5",
        "text": "=[INFORMATIF - Mission du Producteur ({{ $node[\"entree\"].json.kin }})]\n\n{{ $node[\"entree\"].json.mission.length > 15000 ? \"[...]\" : \"\" }}{{ $node[\"entree\"].json.mission.substring($node[\"entree\"].json.mission.length - 15000)}}\n\n[/INFORMATIF - Mission du Producteur ({{ $node[\"entree\"].json.kin }})]\n\n---\n\n[INFORMATIF - Information de lancement du Producteur (Template)]\n\n{{ $node[\"thread\"].json.thread.length > 10000 ? \"[...]\\n\\n\" : \"\" }}{{ $node[\"thread\"].json.thread.substring($node[\"thread\"].json.thread.length - 10000)}}\n\n[/INFORMATIF - Information de lancement du Producteur (Template)]\n\n---\n\nINSTRUCTIONS :\n\nC'est le tout début de la mission !\n\nEffectue les Actions  1. et 3a. de ton processus en une fois, de manière à :\n- Lancer le Suivi de l'Avancement de la Mission via la TODOLIST,\n- Déterminer la première Action à réaliser par {{ $node[\"entree\"].json.kin }}.",
        "options": {}
      },
      "id": "2a7970db-f051-460d-a93c-c54907c0e294",
      "name": "Manager",
      "type": "@n8n/n8n-nodes-langchain.openAiAssistant",
      "typeVersion": 1,
      "position": [
        60,
        480
      ],
      "retryOnFail": false,
      "credentials": {
        "openAiApi": {
          "id": "WY3bm7GCb9qfewyS",
          "name": "OpenAi account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "workflowId": "YWxRZmBa38HYCjnv",
        "options": {}
      },
      "id": "8a614455-8cad-4149-bd2e-ce8fb76e46f0",
      "name": "thread",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -420,
        480
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = JSON.parse(JSON.stringify($node[\"entree\"].json));\n\ndelete json.query;\ndelete json.output;\ndelete json.instructions;\n\njson.mission = json.mission.length > 10000 ? \"[...]\" : \"\" + json.mission.substring(json.mission.length - 10000);\nif (json.missionDuDemandeur) {\n  json.missionDuDemandeur = json.missionDuDemandeur.length > 10000 ? \"[...]\" : \"\" + json.missionDuDemandeur.substring(json.missionDuDemandeur.length - 10000);\n}\n\njson.instructions = $node[\"Manager\"].json.output;\n\njson.date = $now.toString();\njson.executionId = $execution.id;\n\n// Function to remove null attributes from a JSON object\nfunction removeNullAttributes(obj) {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] === null || obj[key] == \"\") {\n            delete obj[key];\n        } else if (typeof obj[key] === 'object') {\n            // Recursive call for nested objects\n            removeNullAttributes(obj[key]);\n        }\n    });\n}\n\n// Function to remove threads & prompts\nfunction removePropertiesWithThread(obj) {\n    for (let key in obj) {\n        if (key.toLowerCase().includes('thread') || key.toLowerCase().includes('prompt')) {\n            // Supprime la propriété si la clé contient 'thread'\n            delete obj[key];\n        } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n            // Appel récursif si la propriété est un objet\n            removePropertiesWithThread(obj[key]);\n        }\n    }\n}\n\n// Remove threads from the json object\nremoveNullAttributes(json);\n\n// Remove null attributes from the json object\nremovePropertiesWithThread(json);\n\nreturn {\"json\": json};"
      },
      "id": "69dc4fea-191a-4348-9f2e-77e758fcca87",
      "name": "todo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        480
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $node[\"Execute Workflow Trigger\"].json;\n\nreturn {\"json\": json};"
      },
      "id": "18a39d88-1256-43f1-a315-ddb45bcd58bf",
      "name": "entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -640,
        480
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}upsert",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"todo\",\n\"vectors\": {\n\"id\": \"{{ $node[\"entree\"].json.kin }}-{{ $json.mailId }}\",\n\"metadata\": {{ JSON.stringify($json) }},\n\"values\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }}\n}\n}",
        "options": {}
      },
      "id": "c7d25f59-cec2-4dc5-9cfa-6c6c4d7b4019",
      "name": "Upsert todo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        680,
        480
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "=EYWde6gUS9Qq2ok7",
        "options": {}
      },
      "id": "03714db3-1d08-4877-9753-98320aa20bfc",
      "name": "Send  Notifications",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        680,
        260
      ]
    },
    {
      "parameters": {
        "workflowId": "=IJeSapyzv0Y9koZ9",
        "options": {}
      },
      "id": "1f1ca0f0-a80a-4875-a521-0e58b91389f9",
      "name": "defaultEmbedding",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -180,
        480
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Nico reçoit un email": {
      "lastTimeChecked": 1706088137,
      "possibleDuplicates": [
        "18d3ac70312f4667"
      ]
    },
    "node:Seb reçoit un email": {
      "lastTimeChecked": 1706023258
    },
    "node:Kin Mail": {
      "lastTimeChecked": 1706305011,
      "possibleDuplicates": [
        "18d47b488e5cab95"
      ]
    }
  },
  "tags": [
    {
      "createdAt": "2024-01-21T09:46:57.068Z",
      "updatedAt": "2024-01-21T09:46:57.068Z",
      "id": "O7AwhYu4Pf4sOOHS",
      "name": "beta"
    },
    {
      "createdAt": "2023-12-17T10:32:35.457Z",
      "updatedAt": "2023-12-17T10:32:35.457Z",
      "id": "y4SS6pvxfLMwCsGn",
      "name": "service"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-31T07:01:44.000Z",
  "versionId": "e62d5d61-31da-4af0-a43b-97194f805844"
}