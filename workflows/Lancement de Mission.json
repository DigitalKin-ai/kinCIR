{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "entree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "thread": {
      "main": [
        [
          {
            "node": "defaultEmbedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entree": {
      "main": [
        [
          {
            "node": "thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "defaultEmbedding": {
      "main": [
        [
          {
            "node": "Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send  Notifications": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Manager": {
      "main": [
        [
          {
            "node": "mission set todo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mission set todo": {
      "main": [
        [
          {
            "node": "Get thread missions",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send  Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "mergedMissions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get thread missions": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert mission": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clean mission": {
      "main": [
        [
          {
            "node": "Upsert mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mergedMissions": {
      "main": [
        [
          {
            "node": "clean mission",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-28T18:29:15.855Z",
  "id": "DXYPhavwlYlTKPqu",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Lancement de Mission",
  "nodes": [
    {
      "parameters": {},
      "id": "af5b82ec-e492-41db-9904-9799adbd02ff",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -900,
        660
      ]
    },
    {
      "parameters": {
        "workflowId": "YWxRZmBa38HYCjnv",
        "options": {}
      },
      "id": "8a614455-8cad-4149-bd2e-ce8fb76e46f0",
      "name": "thread",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -460,
        660
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $node[\"Execute Workflow Trigger\"].json;\n\nreturn {\"json\": json};"
      },
      "id": "18a39d88-1256-43f1-a315-ddb45bcd58bf",
      "name": "entree",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -680,
        660
      ]
    },
    {
      "parameters": {
        "workflowId": "=EYWde6gUS9Qq2ok7",
        "options": {}
      },
      "id": "03714db3-1d08-4877-9753-98320aa20bfc",
      "name": "Send  Notifications",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -680,
        1120
      ]
    },
    {
      "parameters": {
        "workflowId": "=IJeSapyzv0Y9koZ9",
        "options": {}
      },
      "id": "1f1ca0f0-a80a-4875-a521-0e58b91389f9",
      "name": "defaultEmbedding",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        -220,
        660
      ]
    },
    {
      "parameters": {
        "assistantId": "asst_NRJfqzvKf73U2CjrI4bqMSf5",
        "text": "=[INFORMATIF - Mission du Producteur ({{ $node[\"entree\"].json.kin }})]\n\n{{ $node[\"entree\"].json.mission.length > 15000 ? \"[...]\" : \"\" }}{{ $node[\"entree\"].json.mission.substring($node[\"entree\"].json.mission.length - 15000)}}\n\n[/INFORMATIF - Mission du Producteur ({{ $node[\"entree\"].json.kin }})]\n\n===\n\n[INFORMATIF - Information de lancement du Producteur (Template)]\n\n{{ $node[\"thread\"].json.thread.length > 10000 ? \"[...]\\n\\n\" : \"\" }}{{ $node[\"thread\"].json.thread.substring($node[\"thread\"].json.thread.length - 10000)}}\n\n[/INFORMATIF - Information de lancement du Producteur (Template)]\n\n===\n\nINSTRUCTIONS :\n\nC'est le tout début de la mission !\n\nEffectue les Actions  1. et 2. de ton processus en une fois, de manière à :\n- Lancer le Suivi de l'Avancement de la Mission via la TODOLIST,\n- Déterminer la première Action à réaliser par {{ $node[\"entree\"].json.kin }}.\n\nLa Mission sera ensuite automatiquement lancée par le Workflow \"Lancement de Mission\".",
        "options": {}
      },
      "id": "2a7970db-f051-460d-a93c-c54907c0e294",
      "name": "Manager",
      "type": "@n8n/n8n-nodes-langchain.openAiAssistant",
      "typeVersion": 1,
      "position": [
        20,
        660
      ],
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "WY3bm7GCb9qfewyS",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $node[\"entree\"].json;\n\ndelete json.output;\ndelete json.instructions;\n\njson.instructions = $node[\"Manager\"].json.output;\njson.status = \"todo\";\njson.executionId = $execution.id;\njson.documentGoogleDriveId = $node[\"thread\"].json.documentGoogleDriveId;\n\nreturn {\"json\": json};"
      },
      "id": "69dc4fea-191a-4348-9f2e-77e758fcca87",
      "name": "mission set todo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -900,
        940
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let json = $node[\"clean mission\"].json;\n\nif ($node[\"entree\"].json.chatInput != null) {\n  return {\"output\": JSON.stringify(json)};\n}\n\nreturn {\"response\" : JSON.stringify(json)};"
      },
      "id": "a355bfb7-f320-4468-a490-f37e3028ec1a",
      "name": "response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        620,
        1100
      ]
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "id": "79ea2d9d-6015-4814-a8c3-b07e04dd70ef",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        400,
        1100
      ]
    },
    {
      "parameters": {
        "jsCode": "let mergedJson = {};\n\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  mergedJson = {\n    ...mergedJson,\n    ...item.json.metadata\n  };\n}\n\nmergedJson = {\n  ...mergedJson,\n  ...$node[\"entree\"].json\n};\n\ndelete mergedJson.output;\n\nreturn {\"json\": mergedJson};"
      },
      "id": "9c644964-6983-45db-9b6c-bf6862ed5d8c",
      "name": "mergedMissions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -220,
        940
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "matches",
        "options": {}
      },
      "id": "76dff0c9-b237-426e-9f48-17b78e3054fc",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -460,
        940
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}query",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"namespace\": \"missions\",\n  \"includeMetadata\": true,\n  \"topK\": 100,\n  \"filter\" : {\"threadId\": \"{{ $json.threadId }}\"},\n  \"vector\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }}\n}",
        "options": {}
      },
      "id": "ece3e372-0e17-4a51-a95b-949bf614098c",
      "name": "Get thread missions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -680,
        940
      ],
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.vectorDatabaseEndpoint }}vectors/upsert",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "pineconeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"namespace\": \"missions\",\n\"vectors\": {\n   \"id\": \"{{ $json.kin }}-{{ $json.threadId }}\",\n   \"metadata\": {{ JSON.stringify($json) }},\n   \"values\": {{ JSON.stringify($node[\"defaultEmbedding\"].json.defaultEmbedding) }}\n}\n}",
        "options": {}
      },
      "id": "6ba35f9f-94d1-4f15-bb66-9848b5c3d368",
      "name": "Upsert mission",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        220,
        940
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "pineconeApi": {
          "id": "LakE1nni5DFtskNv",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function truncateStringsInJson(obj) {\n    // Vérifier si l'objet est null ou undefined\n    if (obj === null || obj === undefined) {\n        return obj;\n    }\n\n    // Parcourir les propriétés de l'objet\n    for (let key in obj) {\n        if (typeof obj[key] === 'string' && key !== \"json\") {\n            // Tronquer les strings à 500 caractères et ajouter \"[...]\" si nécessaire\n            if (obj[key].length > 5000) {\n                obj[key] = obj[key].substring(0, 5000) + \"[...]\";\n            }\n        } else if (typeof obj[key] === 'object') {\n            // Appliquer la fonction de manière récursive pour les objets et tableaux\n            truncateStringsInJson(obj[key]);\n        }\n    }\n\n    return obj;\n}\n\n// Function to remove null attributes from a JSON object\nfunction removeNullAttributes(obj) {\n    Object.keys(obj).forEach(key => {\n        if (obj[key] === null || obj[key] == \"\") {\n            delete obj[key];\n        } else if (typeof obj[key] === 'object') {\n            // Recursive call for nested objects\n            removeNullAttributes(obj[key]);\n        }\n    });\n}\n\nlet json = JSON.parse(JSON.stringify($json));\n\ndelete json.json;\ndelete json.query;\ndelete json.response;\ndelete json.command;\n\ndelete json.thread;\ndelete json.entireThread;\ndelete json.promptProducteur;\n\n\njson = truncateStringsInJson(json);\n\n// Remove threads from the json object\nremoveNullAttributes(json);\n\nif (json.mission )  {\n  json.mission = json.mission.length > 10000 ? \"[...]\" : \"\" + json.mission.substring(json.mission.length - 10000);\n}\n\nreturn {\"json\": json};"
      },
      "id": "48fd48f1-28fb-4486-8267-32a7211e5d3e",
      "name": "clean mission",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        940
      ]
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Nico reçoit un email": {
      "lastTimeChecked": 1706088137,
      "possibleDuplicates": [
        "18d3ac70312f4667"
      ]
    },
    "node:Seb reçoit un email": {
      "lastTimeChecked": 1706023258
    },
    "node:Kin Mail": {
      "lastTimeChecked": 1706305011,
      "possibleDuplicates": [
        "18d47b488e5cab95"
      ]
    }
  },
  "tags": [
    {
      "createdAt": "2024-01-21T09:46:57.068Z",
      "updatedAt": "2024-01-21T09:46:57.068Z",
      "id": "O7AwhYu4Pf4sOOHS",
      "name": "beta"
    },
    {
      "createdAt": "2023-12-17T10:32:35.457Z",
      "updatedAt": "2023-12-17T10:32:35.457Z",
      "id": "y4SS6pvxfLMwCsGn",
      "name": "service"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-02-01T01:20:29.000Z",
  "versionId": "7d6e5e89-2118-4ff2-9b1e-cea0c5e7145e"
}